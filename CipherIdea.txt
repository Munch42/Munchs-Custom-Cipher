Take in a key that is then converted to a number of offsets similar to a caesar cipher
Example:
Input key: yL3(
Lowercase Letters = Their place in the alphabet + 1/2 the number of symbols in the key rounded
Uppercase Letters = Their place in the alphabet + pi * the sum of all numbers in the key - half of the key's length then rounded to the nearest number
Numbers = The number itself - (0.5 * the number of lowercase letters in the key) then rounded off
Punctuation = Location (as a number) in an inverse array of the symbols divided by pi and then rounded to the nearest number
Inverse array of punctuation = ~}|{`_^]\[@?>=<;:/.- ,+*)('&%$#"!
                               123456789111111111222222222233333
                                        123456789123456789123456

                               Read the above as 1-9 then 11 12 13, the second digit is just beneath it

Therefore, the input key would have its offsets as for example:
27, 14, -2, 9
(25 + 2) (12 + 4 - 2) (3 - 5) (28 / pi ~= 8.9 = 9)

If the total number of uppercase letters is even then it stays the same while if it is odd, it inverses the offsets
Then, each offset has a chance to become the inverse of itself by being multiplied by -1 so in this case it would look like:
27, -14, 2, 9
Here, the 14 and the -2 became their inverses of -14 and 2
(This step is here so that each character of the key can be a negative and not just the numbers)

Then, we take those offsets and apply them to the input text so if the input was: Hellos!!
It would come out with this one as:
QQNWPE}\

This is because
H + 27 characters = Q
e - 14 characters = Q
l + 2 characters = N
l + 9 characters = W
o + 27 characters = P
s - 14 characters = E
! + 2 symbol characters = }
! + 9 symbol characters = \

Optional: Could make it so that it swaps between symbol and letter characters every x characters dependant on the last or first character of the key so that
you could not tell whether or not an input character was a symbol or a letter like

Additionally, take in the key and add some variations to it dependant on some section (likely the last section) of the key so for example if the last part of the key
has an offset divisible by 3, then we inverse the order of the offsets and then apply those to the original key making another key which we repeat this process
for to make 10 keys in addition to the first key meaning that we have 10 completely unique and different keys meaning that not a single offset in the encrypted
text is the exact replica of the original key's offsets.